geog_xw_2010 <- read_csv("data-raw/2010_block_to_geo_crosswalk.csv")
geog_xw_2020 <- read_csv("data-raw/2020_block_to_geo_crosswalk.csv")
usethis::use_data(census_muni_keys, muni_data_keys, community_type, rpa_data_keys, mapc_data_keys, mbta_data_keys,
census_xw_bl, census_xw_bg, census_xw_ct, geog_xw_2010, geog_xw_2020,
overwrite = TRUE)
library(tidyverse)
all_muni_data_keys <- read_csv("data-raw/muni_data_keys_new.csv") %>% arrange(muni_id)
census_muni_keys <- all_muni_data_keys %>% select(muni_id, muni_name, starts_with("cosub"))
community_type <- all_muni_data_keys %>% select(muni_id, muni_name, cmtyp08_id, cmtyp08, cmsbt08_id, cmsbt08)
rpa_data_keys <- all_muni_data_keys %>% select(muni_id, muni_name, rpa_id, rpa_acr, rpa_name, rpa_alt)
mapc_data_keys <- all_muni_data_keys %>% select(muni_id, muni_name, mapc, mmc, nsc, subrg_id, subrg_nm, subrg_acr, subrg_alt)
mbta_data_keys <- all_muni_data_keys %>% select(muni_id, muni_name, rta_acr, rta_name, mbta, mbta14, mbta51, mbta_other, mbta_cmtyp)
census_xw_bl <- read_csv("data-raw/bl10_2020xw.csv")
census_xw_bg <- read_csv("data-raw/bg10_2020xw.csv")
census_xw_ct <- read_csv("data-raw/ct10_2020xw.csv")
geog_xw_2010 <- read_csv("data-raw/2010_block_to_geo_crosswalk.csv")
geog_xw_2020 <- read_csv("data-raw/2020_block_to_geo_crosswalk.csv")
usethis::use_data(census_muni_keys, all_muni_data_keys, community_type, rpa_data_keys, mapc_data_keys, mbta_data_keys,
census_xw_bl, census_xw_bg, census_xw_ct, geog_xw_2010, geog_xw_2020,
overwrite = TRUE)
devtools::load_all(".")
?mapcdatakeys::community_type
usethis::use_r("census_xw_bl")
usethis::use_r("census_xw_bg")
usethis::use_r("census_xw_ct")
usethis::use_r("geog_xw_2010")
usethis::use_r("geog_xw_2020")
census_xw_bl
census_xw_bg
census_xw_ct
geog_xw_2010
census_xw_bl
View(census_xw_ct)
census_xw_ct
census_xw_bl <- read_csv("data-raw/bl10_2020xw.csv") %>% select(!c(ct_area))
usethis::use_data(census_muni_keys, all_muni_data_keys, community_type, rpa_data_keys, mapc_data_keys, mbta_data_keys,
census_xw_bl, census_xw_bg, census_xw_ct, geog_xw_2010, geog_xw_2020,
overwrite = TRUE)
census_xw_bl
census_xw_bl <- read_csv("data-raw/bl10_2020xw.csv") %>% select(!c(ct_area, weight))
usethis::use_data(census_muni_keys, all_muni_data_keys, community_type, rpa_data_keys, mapc_data_keys, mbta_data_keys,
census_xw_bl, census_xw_bg, census_xw_ct, geog_xw_2010, geog_xw_2020,
overwrite = TRUE)
census_xw_bl
census_xw_bg
census_xw_bl <- read_csv("data-raw/bl10_2020xw.csv") %>% select(!c(ct_area, weight)) %>% rename(bl10_id = geoid10)
census_xw_bl
usethis::use_data(census_muni_keys, all_muni_data_keys, community_type, rpa_data_keys, mapc_data_keys, mbta_data_keys,
census_xw_bl, census_xw_bg, census_xw_ct, geog_xw_2010, geog_xw_2020,
overwrite = TRUE)
census_xw_ct
census_xw_bg
census_xw_bl
geog_xw_2020
geog_xw_2010
devtools::document()
usethis::use_package_doc()
usethis::use_tibble()
devtools::document()
devtools::load_all()
census_xw_mu
mapcdatakeys::crosswalk_geog(year = 2020)
mapcdatakeys::crosswalk_geog(year = 2010)
mapcdatakeys::crosswalk_wtd(geography = "tract")
mapcdatakeys::crosswalk_wtd(geography = "county subdivision")
mapcdatakeys::crosswalk_wtd(geography = "tract")
mapcdatakeys::crosswalk_wtd(geography = "block")
mapcdatakeys::crosswalk_wtd(geography = "block group")
mapcdatakeys::
mapcdatakeys::all_muni_data_keys
mapcdatakeys::
mapcdatakeys::all_muni_data_keys
?mapcdatakeys::all_muni_data_keys
mapcdatakeys::census_xw_bg
mapcdatakeys::census_xw_ct
mapcdatakeys::census_xw_bl
mapcdatakeys::census_xw_mu
mapcdatakeys::geog_xw_2020
mapcdatakeys::geog_xw_2010
mapcdatakeys::geog_xw_2020
mapcdatakeys::crosswalk_wtd(geography = 'tract')
mapcdatakeys::crosswalk_wtd(geography = 'block')
library(tidyverse)
all_muni_data_keys <- read_csv("data-raw/muni_data_keys_new.csv") %>% arrange(muni_id)
census_muni_keys <- all_muni_data_keys %>% select(muni_id, muni_name, starts_with("cosub"))
community_type <- all_muni_data_keys %>% select(muni_id, muni_name, cmtyp08_id, cmtyp08, cmsbt08_id, cmsbt08)
rpa_data_keys <- all_muni_data_keys %>% select(muni_id, muni_name, rpa_id, rpa_acr, rpa_name, rpa_alt)
mapc_data_keys <- all_muni_data_keys %>% select(muni_id, muni_name, mapc, mmc, nsc, subrg_id, subrg_nm, subrg_acr, subrg_alt)
mbta_data_keys <- all_muni_data_keys %>% select(muni_id, muni_name, rta_acr, rta_name, mbta, mbta14, mbta51, mbta_other, mbta_cmtyp)
# 2010 Geographies
census_xw_bl10 <- read_csv("data-raw/bl10_2020xw.csv") %>%
select(!c(ct_area, weight)) %>% rename(bl10_id = geoid10) %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_bg10 <- read_csv("data-raw/bg10_2020xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_ct10 <- read_csv("data-raw/ct10_2020xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_mu <- read_csv("data-raw/muni_2020xw.csv") %>% select(!seq_id) %>%
janitor::clean_names() %>%
rename(muni_name = basename,
cosub_cn10 = geoid_2010,
cosub_cn20 = geoid_2020,
huch1020p = huch1020pc)
# 2020 Geographies
census_xw_bl20 <- read_csv("data-raw/bl20_2010xw.csv") %>%
select(!c(ct_area, weight)) %>% rename(bl10_id = geoid10) %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_bg20 <- read_csv("data-raw/bg20_2010xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_ct20 <- read_csv("data-raw/ct20_2010xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
read_csv("data-raw/bl20_2010xw.csv")
# 2020 Geographies
census_xw_bl20 <- read_csv("data-raw/bl20_2010xw.csv") %>%
select(!c(ct_area, weight)) %>% rename(bl20_id = geoid20) %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_bg20 <- read_csv("data-raw/bg20_2010xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_ct20 <- read_csv("data-raw/ct20_2010xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
geog_xw_2010 <- read_csv("data-raw/2010_block_to_geo_crosswalk.csv")
geog_xw_2020 <- read_csv("data-raw/2020_block_to_geo_crosswalk.csv")
usethis::use_data(census_muni_keys, all_muni_data_keys, community_type, rpa_data_keys, mapc_data_keys, mbta_data_keys,
census_xw_bl10, census_xw_bg10, census_xw_ct10,
census_xw_bl20, census_xw_bg20, census_xw_ct20,
geog_xw_2010, geog_xw_2020, census_xw_mu,
overwrite = TRUE)
problems()
problems()
#'
#' @param geography Desired census geography. Can be either 'block', 'block group', 'tract' or 'county subdivision'
#' @param vintage Desired Census Year
#'
#' @return
#' @export
#'
#' @examples
#'
#' crosswalk_wtd(geography = 'block')
crosswalk_wtd <- function(geography, vintage){
ifelse(geography == "block" & vintage == 2020, return(mapcdatakeys::census_xw_bl20),
ifelse(geography == 'block group' & vintage == 2020, return(mapcdatakeys::census_xw_bg20),
ifelse(geography == 'tract' & vintage == 2020, return(mapcdatakeys::census_xw_ct20),
ifelse(geography == 'county subdivision' & is.null(vintage), return(mapcdatakeys::census_xw_mu),
ifelse(geography == "block" & vintage == 2010, return(mapcdatakeys::census_xw_bl10),
ifelse(geography == "block group" & vintage == 2010, return(mapcdatakeys::census_xw_bg10),
ifelse(geography == "tract" & vintage == 2010, return(mapcdatakeys::census_xw_ct10),
stop("Please enter valid geography name, one of: 'block', 'block group', 'tract' or 'county subdivision'"))))))))
}
census_xw_bl10
census_xw_bl20
census_xw_bg20
census_xw_ct20
census_xw_ct10
usethis::use_data(census_muni_keys, all_muni_data_keys, community_type, rpa_data_keys, mapc_data_keys, mbta_data_keys,
census_xw_bl10, census_xw_bg10, census_xw_ct10,
census_xw_bl20, census_xw_bg20, census_xw_ct20,
geog_xw_2010, geog_xw_2020, census_xw_mu,
overwrite = TRUE)
devtools::load_all()
library(tidyverse)
all_muni_data_keys <- read_csv("data-raw/muni_data_keys_new.csv") %>% arrange(muni_id)
census_muni_keys <- all_muni_data_keys %>% select(muni_id, muni_name, starts_with("cosub"))
community_type <- all_muni_data_keys %>% select(muni_id, muni_name, cmtyp08_id, cmtyp08, cmsbt08_id, cmsbt08)
rpa_data_keys <- all_muni_data_keys %>% select(muni_id, muni_name, rpa_id, rpa_acr, rpa_name, rpa_alt)
mapc_data_keys <- all_muni_data_keys %>% select(muni_id, muni_name, mapc, mmc, nsc, subrg_id, subrg_nm, subrg_acr, subrg_alt)
mbta_data_keys <- all_muni_data_keys %>% select(muni_id, muni_name, rta_acr, rta_name, mbta, mbta14, mbta51, mbta_other, mbta_cmtyp)
# 2010 Geographies
census_xw_bl10 <- read_csv("data-raw/bl10_2020xw.csv") %>%
select(!c(ct_area, weight)) %>% rename(bl10_id = geoid10) %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_bg10 <- read_csv("data-raw/bg10_2020xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_ct10 <- read_csv("data-raw/ct10_2020xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_mu <- read_csv("data-raw/muni_2020xw.csv") %>% select(!seq_id) %>%
janitor::clean_names() %>%
rename(muni_name = basename,
cosub_cn10 = geoid_2010,
cosub_cn20 = geoid_2020,
huch1020p = huch1020pc)
# 2020 Geographies
census_xw_bl20 <- read_csv("data-raw/bl20_2010xw.csv") %>%
select(!c(ct_area, weight)) %>% rename(bl20_id = geoid20) %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_bg20 <- read_csv("data-raw/bg20_2010xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_ct20 <- read_csv("data-raw/ct20_2010xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
geog_xw_2010 <- read_csv("data-raw/2010_block_to_geo_crosswalk.csv")
geog_xw_2020 <- read_csv("data-raw/2020_block_to_geo_crosswalk.csv")
usethis::use_data(census_muni_keys, all_muni_data_keys, community_type, rpa_data_keys, mapc_data_keys, mbta_data_keys,
census_xw_bl10, census_xw_bg10, census_xw_ct10,
census_xw_bl20, census_xw_bg20, census_xw_ct20,
geog_xw_2010, geog_xw_2020, census_xw_mu,
overwrite = TRUE)
problems()
usethis::use_data(census_muni_keys, all_muni_data_keys, community_type, rpa_data_keys, mapc_data_keys, mbta_data_keys,
census_xw_bl10, census_xw_bg10, census_xw_ct10,
census_xw_bl20, census_xw_bg20, census_xw_ct20,
geog_xw_2010, geog_xw_2020, census_xw_mu,
overwrite = TRUE)
census_xw_ct20
census_xw_bl20
census_xw_bg20
census_xw_ct20
census_xw_bl10
census_xw_bg10
census_xw_ct10
crosswalk_geog(year = 2010)
#' Function to call desired nested geographies for blocks for both 2010 and 2020
#'
#' @param year Desired Census Year
#'
#' @return
#' @export
#'
#' @examples
#'
#' crosswalk_geog(year = 2010)
crosswalk_geog <- function(year){
ifelse(year == 2010, return(mapcdatakeys::geog_xw_2010),
ifelse(year == 2020, return(mapcdatakeys::geog_xw_2020),
stop("Please enter valid Census Year: 2010, or 2020")))
}
crosswalk_geog(year = 2010)
devtools::load_all()
rm(list = c("crosswalk_geog"))
devtools::load_all()
mapcdatakeys::crosswalk_wtd(geography = "tract", vintage = 2010)
mapcdatakeys::crosswalk_wtd(geography = "tract", vintage = 2020)
mapcdatakeys::crosswalk_wtd(geography = "block", vintage = 2020)
mapcdatakeys::crosswalk_wtd(geography = "block", vintage = 2010)
?mapcdatakeys::crosswalk_wtd
devtools::document()
census_xw_mu
census_xw_bl20
census_xw_mu
census_xw_bl10
census_xw_ct10
devtools::load_all()
#'
#' @param geography Desired census geography. Can be either 'block', 'block group', 'tract' or 'county subdivision'
#' @param vintage Desired Census Year (either 2010, or 2020)
#'
#' @return
#' @export
#'
#' @examples
#'
#' crosswalk_wtd(geography = 'block', vintage = 2010)
crosswalk_wtd <- function(geography, vintage){
ifelse(geography == "block" & vintage == 2020, return(mapcdatakeys::census_xw_bl20),
ifelse(geography == 'block group' & vintage == 2020, return(mapcdatakeys::census_xw_bg20),
ifelse(geography == 'tract' & vintage == 2020, return(mapcdatakeys::census_xw_ct20),
ifelse(geography == 'county subdivision' & is.null(vintage), return(mapcdatakeys::census_xw_mu),
ifelse(geography == "block" & vintage == 2010, return(mapcdatakeys::census_xw_bl10),
ifelse(geography == "block group" & vintage == 2010, return(mapcdatakeys::census_xw_bg10),
ifelse(geography == "tract" & vintage == 2010, return(mapcdatakeys::census_xw_ct10),
stop("Please enter valid geography name, one of: 'block', 'block group', 'tract' or 'county subdivision'"))))))))
}
devtools::document()
rm(list = c("crosswalk_wtd"))
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
crosswalk_geog
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
usethis::use_testthat()
use_readme_rmd()
usethis::use_readme_rmd()
mapcdatakeys::muni_data_keys()
mapcdatakeys
library(mapcdatakeys)
mapcdatakeys::all_muni_data_keys()
mapcdatakeys::all_muni_data_keys()
mapcdatakeys::all_muni_data_keys()
all_muni_data_keys
mapcdatakeys::crosswalk_wtd(geography = 'tract', vintage = 2010)
slice_sample(mapcdatakeys::crosswalk_wtd(geography = 'tract', vintage = 2010))
mapcdatakeys::all_muni_data_keys()
all_muni_data_keys()
all_muni_data_keys()
library(mapcdatakeys)
mapcdatakeys::all_muni_data_keys
mapcdatakeys::census_muni_keys()
mapcdatakeys::census_muni_keys
all_muni_data_keys()
all_muni_data_keys
knitr::opts_chunk$set(echo = TRUE)
mapcdatakeys::census_xw_mu
?mapcdatakeys::census_xw_mu
devtools::document()
devtools::check()
devtools::load_all()
?mapcdatakeys::census_xw_mu
mapcdatakeys::census_xw_mu
mapcdatakeys::census_xw_mu
mapcdatakeys::mbta_data_keys
?mapcdatakeys::mbta_data_keys
?mapcdatakeys::rpa_data_keys
?mapcdatakeys::community_type
?mapcdatakeys::mapc_data_keys
?mapcdatakeys::census_muni_keys
?mapcdatakeys::all_muni_data_keys
knitr::opts_chunk$set(echo = TRUE)
?mapcdatakeys::census_xw_bg10
?mapcdatakeys::census_xw_bl10
?mapcdatakeys::census_xw_bg10
mapcdatakeys::census_xw_bg10
mapcdatakeys::census_xw_ct10
?mapcdatakeys::census_xw_ct10
mapcdatakeys::geog_xw_2010
?mapcdatakeys::geog_xw_2010
knitr::opts_chunk$set(echo = TRUE)
mapcdatakeys::crosswalk_wtd(geography = 'tract', vintage = 2010)
mapcdatakeys::crosswalk_wtd(geography = 'tract', vintage = 2010) %>% head()
?mapcdatakeys::crosswalk_wtd()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision', vintage = 2010) %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision') %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision', vintage = NULL) %>% head()
devtools::document()
devtools::load_all()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision', vintage = NULL) %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision') %>% head()
mapcdatakeys::census_xw_mu
devtools::document()
devtools::load_all()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision') %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision')
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision', vintage = NULL) %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision', vintage = 2010) %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision', vintage = 2020) %>% head()
devtools::document()
devtools::document()
devtools::load_all()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision') %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision', vintage = 2020) %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision', vintage = NULL) %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision', vintage = NA) %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision', vintage = 2010) %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision', vintage = 2020) %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision') %>% head()
devtools::document()
devtools::load_all()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision') %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'county subdivision', vintage = 2010) %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'tract', vintage = 2010) %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'block group', vintage = 2020) %>% head()
crosswalk_wtd
mapcdatakeys::crosswalk_wtd(geography = 'block group', vintage = 2020) %>% head()
mapcdatakeys::crosswalk_geog(year = 2020)
mapcdatakeys::crosswalk_geog(year = 2020) %>% head()
mapcdatakeys::census_muni_keys %>% head()
mapcdatakeys::mbta_data_keys %>% head()
knitr::opts_chunk$set(echo = TRUE)
mapcdatakeys::crosswalk_wtd(geography = 'tract', vintage = 2010) %>% head()
mapcdatakeys::crosswalk_wtd(geography = 'block group', vintage = 2020) %>% head()
mapcdatakeys::crosswalk_geog(year = 2020) %>% head()
knitr::opts_chunk$set(echo = TRUE)
mapcdatakeys::census_xw_bl10 %>% head()
mapcdatakeys::census_xw_bl20 %>% head()
mapcdatakeys::census_xw_bg10 %>% head()
mapcdatakeys::census_xw_bg20 %>% head()
mapcdatakeys::census_xw_ct10 %>% head()
mapcdatakeys::census_xw_ct20 %>% head()
mapcdatakeys::geog_xw_2010 %>% head()
mapcdatakeys::geog_xw_2020 %>% head()
knitr::opts_chunk$set(echo = TRUE)
mapcdatakeys::all_muni_data_keys %>% head()
mapcdatakeys::census_muni_keys %>% head()
mapcdatakeys::mapc_data_keys %>% head()
mapcdatakeys::community_type %>% head()
mapcdatakeys::rpa_data_keys %>% head()
mapcdatakeys::mbta_data_keys %>% head()
mapcdatakeys::census_xw_mu %>% head()
devtools::build_readme()
devtools::build_readme()
head(mapcdatakeys::crosswalk_wtd(geography = 'block group', vintage = 2020))
head(mapcdatakeys::census_xw_bl10)
knitr::opts_chunk$set(echo = TRUE)
head(mapcdatakeys::census_xw_bl10)
head(mapcdatakeys::census_xw_bl20)
head(mapcdatakeys::census_xw_bg10)
head(mapcdatakeys::census_xw_bg20)
head(mapcdatakeys::census_xw_ct10)
head(mapcdatakeys::census_xw_ct20)
head(mapcdatakeys::geog_xw_2010)
head(mapcdatakeys::geog_xw_2020)
knitr::opts_chunk$set(echo = TRUE)
head(mapcdatakeys::all_muni_data_keys)
head(mapcdatakeys::census_muni_keys)
head(mapcdatakeys::mapc_data_keys)
head(mapcdatakeys::community_type)
head(mapcdatakeys::rpa_data_keys)
head(mapcdatakeys::mbta_data_keys)
head(mapcdatakeys::census_xw_mu)
devtools::build_readme()
devtools::install()
geog_xw_2010
geog_xw_2020 <- read_csv("data-raw/2020_block_to_geo_crosswalk.csv")
library(tidyverse)
all_muni_data_keys <- read_csv("data-raw/muni_data_keys_new.csv") %>% arrange(muni_id)
census_muni_keys <- all_muni_data_keys %>% select(muni_id, muni_name, starts_with("cosub"))
community_type <- all_muni_data_keys %>% select(muni_id, muni_name, cmtyp08_id, cmtyp08, cmsbt08_id, cmsbt08)
rpa_data_keys <- all_muni_data_keys %>% select(muni_id, muni_name, rpa_id, rpa_acr, rpa_name, rpa_alt)
mapc_data_keys <- all_muni_data_keys %>% select(muni_id, muni_name, mapc, mmc, nsc, subrg_id, subrg_nm, subrg_acr, subrg_alt)
mbta_data_keys <- all_muni_data_keys %>% select(muni_id, muni_name, rta_acr, rta_name, mbta, mbta14, mbta51, mbta_other, mbta_cmtyp)
# 2010 Geographies
census_xw_bl10 <- read_csv("data-raw/bl10_2020xw.csv") %>%
select(!c(ct_area, weight)) %>% rename(bl10_id = geoid10) %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_bg10 <- read_csv("data-raw/bg10_2020xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_ct10 <- read_csv("data-raw/ct10_2020xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_mu <- read_csv("data-raw/muni_2020xw.csv") %>% select(!seq_id) %>%
janitor::clean_names() %>%
rename(muni_name = basename,
cosub_cn10 = geoid_2010,
cosub_cn20 = geoid_2020,
huch1020p = huch1020pc)
# 2020 Geographies
census_xw_bl20 <- read_csv("data-raw/bl20_2010xw.csv") %>%
select(!c(ct_area, weight)) %>% rename(bl20_id = geoid20) %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_bg20 <- read_csv("data-raw/bg20_2010xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
census_xw_ct20 <- read_csv("data-raw/ct20_2010xw.csv") %>%
rename(huch1020p = hu_chng_p,
popch1020p = pop_chng_p,
huch1020 = hu_chng,
popch1020 = pop_chng)
geog_xw_2010 <- read_csv("data-raw/2010_block_to_geo_crosswalk.csv")
geog_xw_2020 <- read_csv("data-raw/2020_block_to_geo_crosswalk.csv")
usethis::use_data(census_muni_keys, all_muni_data_keys, community_type, rpa_data_keys, mapc_data_keys, mbta_data_keys,
census_xw_bl10, census_xw_bg10, census_xw_ct10,
census_xw_bl20, census_xw_bg20, census_xw_ct20,
geog_xw_2010, geog_xw_2020, census_xw_mu,
overwrite = TRUE)
devtools::document()
devtools::load_all()
mapcdatakeys::geog_xw_2020
mapcdatakeys::geog_xw_2010
read_csv("data-raw/muni_data_keys_new.csv")
library(tidyverse)
read_csv("data-raw/muni_data_keys_new.csv")
